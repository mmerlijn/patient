<?php
namespace mmerlijn\patient\tests\Unit;

use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Foundation\Testing\RefreshDatabase;
use mmerlijn\patient\Models\Patient;
use mmerlijn\patient\Models\Requester;
use mmerlijn\patient\tests\TestCase;


class DatabaseTest extends TestCase
{
    use RefreshDatabase;
    private $patient;
    private $requesters;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        //3 requesters aanmaken
        $this->requesters = Requester::factory(3)->create();
        //1 requester aanmaken met relatie tot 0 en 1
        $requester = Requester::factory(1)->relations(Requester::whereIn('id',[1,2])->get()->pluck('agbcode')->toArray())->create();
        //dd(Requester::get()->map(fn($item)=>$item->only(['id','agbcode','relations'])));

        //10 patienten aanmaken met een willekeurige requester
        $this->patient = Patient::factory(10)
            ->state(new Sequence(fn($sequence)=>['last_requester'=>Requester::all()->random()])) //voeg een willekeurige aanvrager toe aan de patienten
            ->create();



       //$req = Requester::factory(3)
       //    ->has(Patient::factory(4))
       //    ->create(); //OF makkelijker
        // 3 requesters aanmaken met ieder 4 patienten
        // 12 patienten aanmaken
        $req = Requester::factory(3)
            ->hasPatients(4)
            ->create();

    }

    /** @test */
    function test_has_table_patient()
    {

        $this->assertDatabaseCount('patients', 22);
        $this->assertDatabaseHas('patients',['lastname'=>$this->patient[0]->lastname]);
        $this->assertDatabaseHas('patients',['own_lastname'=>$this->patient[0]->own_lastname]);
    }
    function test_has_table_requesters()
    {
        $this->assertDatabaseCount('requesters', 7);
        $this->assertDatabaseHas('requesters',['lastname'=>$this->requesters[0]->lastname]);
        $this->assertDatabaseHas('requesters',['agbcode'=>$this->requesters[0]->agbcode]);
    }
}