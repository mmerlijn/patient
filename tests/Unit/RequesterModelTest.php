<?php

namespace mmerlijn\patient\tests\Unit;

use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\DB;
use mmerlijn\patient\Models\NameModel;
use mmerlijn\patient\Models\Patient;
use mmerlijn\patient\Models\Requester;
use mmerlijn\patient\tests\TestCase;


class RequesterModelTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $req = Requester::factory(5)
            ->hasPatients(3)
            ->create();

    }

    /** @test */
    function test_filter()
    {

        $p = Requester::first();
        $filter = ['name' => substr($p->lastname, 0, 4), 'city' => $p->city];
        DB::enableQueryLog();
        $requesters = Patient::filtered($filter)->get();
        $query = DB::getQueryLog()[0]['query'];
        $this->assertStringContainsString('lastname', $query);
        $this->assertStringContainsString('city', $query);

        DB::flushQueryLog();
    }

    function test_initials_setter_and_getter()
    {
        $r = Requester::first();
        $r->initials = "M.M.";
        $r->save();
        $this->assertDatabaseHas('requesters', ['id' => 1, 'initials' => 'MM']);
        $r->refresh();
        $this->assertSame('M.M.', $r->initials);
    }

    function test_lastname_prefix_observer()
    {
        $r = new Requester();
        $r->agbcode = "012341234";
        $r->lastname = "de Velden";
        $r->prefix = "van de";
        $r->save();
        $r->refresh();
        $this->assertDatabaseHas('requesters', ['lastname' => 'Velden', 'prefix' => 'van de']);
    }
    //        DB::enableQueryLog();
    //        dd(DB::getQueryLog());
}